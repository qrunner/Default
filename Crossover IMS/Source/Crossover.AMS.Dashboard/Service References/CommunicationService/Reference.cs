//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Crossover.AMS.Dashboard.CommunicationService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/Crossover.AMS.Communication.Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Crossover.AMS.Dashboard.CommunicationService.PrivateMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Crossover.AMS.Dashboard.CommunicationService.ConferenceMessage))]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AttachmentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SendedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderSidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Attachments {
            get {
                return this.AttachmentsField;
            }
            set {
                if ((object.ReferenceEquals(this.AttachmentsField, value) != true)) {
                    this.AttachmentsField = value;
                    this.RaisePropertyChanged("Attachments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Sended {
            get {
                return this.SendedField;
            }
            set {
                if ((this.SendedField.Equals(value) != true)) {
                    this.SendedField = value;
                    this.RaisePropertyChanged("Sended");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderSid {
            get {
                return this.SenderSidField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderSidField, value) != true)) {
                    this.SenderSidField = value;
                    this.RaisePropertyChanged("SenderSid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrivateMessage", Namespace="http://schemas.datacontract.org/2004/07/Crossover.AMS.Communication.Model")]
    [System.SerializableAttribute()]
    public partial class PrivateMessage : Crossover.AMS.Dashboard.CommunicationService.Message {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ReadedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RecipientSidField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Readed {
            get {
                return this.ReadedField;
            }
            set {
                if ((this.ReadedField.Equals(value) != true)) {
                    this.ReadedField = value;
                    this.RaisePropertyChanged("Readed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RecipientSid {
            get {
                return this.RecipientSidField;
            }
            set {
                if ((object.ReferenceEquals(this.RecipientSidField, value) != true)) {
                    this.RecipientSidField = value;
                    this.RaisePropertyChanged("RecipientSid");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConferenceMessage", Namespace="http://schemas.datacontract.org/2004/07/Crossover.AMS.Communication.Model")]
    [System.SerializableAttribute()]
    public partial class ConferenceMessage : Crossover.AMS.Dashboard.CommunicationService.Message {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ConferenceIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ConferenceId {
            get {
                return this.ConferenceIdField;
            }
            set {
                if ((this.ConferenceIdField.Equals(value) != true)) {
                    this.ConferenceIdField = value;
                    this.RaisePropertyChanged("ConferenceId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Conference", Namespace="http://schemas.datacontract.org/2004/07/Crossover.AMS.Communication.Model")]
    [System.SerializableAttribute()]
    public partial class Conference : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long AccidentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Crossover.AMS.Contracts.Communication.ConferenceState StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long AccidentId {
            get {
                return this.AccidentIdField;
            }
            set {
                if ((this.AccidentIdField.Equals(value) != true)) {
                    this.AccidentIdField = value;
                    this.RaisePropertyChanged("AccidentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Crossover.AMS.Contracts.Communication.ConferenceState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Crossover.AMS.Communication", ConfigurationName="CommunicationService.ICommunicationServiceContract")]
    public interface ICommunicationServiceContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="Crossover.AMS.Communication/ICommunicationServiceContract/SendConferenceMessage", ReplyAction="Crossover.AMS.Communication/ICommunicationServiceContract/SendConferenceMessageRe" +
            "sponse")]
        void SendConferenceMessage(Crossover.AMS.Dashboard.CommunicationService.ConferenceMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="Crossover.AMS.Communication/ICommunicationServiceContract/SendPrivateMessage", ReplyAction="Crossover.AMS.Communication/ICommunicationServiceContract/SendPrivateMessageRespo" +
            "nse")]
        void SendPrivateMessage(Crossover.AMS.Dashboard.CommunicationService.PrivateMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="Crossover.AMS.Communication/ICommunicationServiceContract/GetPrivateMessages", ReplyAction="Crossover.AMS.Communication/ICommunicationServiceContract/GetPrivateMessagesRespo" +
            "nse")]
        Crossover.AMS.Dashboard.CommunicationService.PrivateMessage[] GetPrivateMessages(string senderSid, string recipientSid);
        
        [System.ServiceModel.OperationContractAttribute(Action="Crossover.AMS.Communication/ICommunicationServiceContract/GetNewPrivateSenders", ReplyAction="Crossover.AMS.Communication/ICommunicationServiceContract/GetNewPrivateSendersRes" +
            "ponse")]
        string[] GetNewPrivateSenders(string recipientSid);
        
        [System.ServiceModel.OperationContractAttribute(Action="Crossover.AMS.Communication/ICommunicationServiceContract/MarkAsReaded", ReplyAction="Crossover.AMS.Communication/ICommunicationServiceContract/MarkAsReadedResponse")]
        void MarkAsReaded(Crossover.AMS.Dashboard.CommunicationService.PrivateMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="Crossover.AMS.Communication/ICommunicationServiceContract/GetConferenceMessages", ReplyAction="Crossover.AMS.Communication/ICommunicationServiceContract/GetConferenceMessagesRe" +
            "sponse")]
        Crossover.AMS.Dashboard.CommunicationService.ConferenceMessage[] GetConferenceMessages(long conferenceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="Crossover.AMS.Communication/ICommunicationServiceContract/CreateConference", ReplyAction="Crossover.AMS.Communication/ICommunicationServiceContract/CreateConferenceRespons" +
            "e")]
        Crossover.AMS.Dashboard.CommunicationService.Conference CreateConference(long accidentId, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="Crossover.AMS.Communication/ICommunicationServiceContract/UpdateConference", ReplyAction="Crossover.AMS.Communication/ICommunicationServiceContract/UpdateConferenceRespons" +
            "e")]
        void UpdateConference(Crossover.AMS.Dashboard.CommunicationService.Conference conference);
        
        [System.ServiceModel.OperationContractAttribute(Action="Crossover.AMS.Communication/ICommunicationServiceContract/DeleteConference", ReplyAction="Crossover.AMS.Communication/ICommunicationServiceContract/DeleteConferenceRespons" +
            "e")]
        void DeleteConference(long conferenceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="Crossover.AMS.Communication/ICommunicationServiceContract/GetConferencieList", ReplyAction="Crossover.AMS.Communication/ICommunicationServiceContract/GetConferencieListRespo" +
            "nse")]
        Crossover.AMS.Dashboard.CommunicationService.Conference[] GetConferencieList(long accidentId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommunicationServiceContractChannel : Crossover.AMS.Dashboard.CommunicationService.ICommunicationServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommunicationServiceContractClient : System.ServiceModel.ClientBase<Crossover.AMS.Dashboard.CommunicationService.ICommunicationServiceContract>, Crossover.AMS.Dashboard.CommunicationService.ICommunicationServiceContract {
        
        public CommunicationServiceContractClient() {
        }
        
        public CommunicationServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommunicationServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommunicationServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommunicationServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SendConferenceMessage(Crossover.AMS.Dashboard.CommunicationService.ConferenceMessage message) {
            base.Channel.SendConferenceMessage(message);
        }
        
        public void SendPrivateMessage(Crossover.AMS.Dashboard.CommunicationService.PrivateMessage message) {
            base.Channel.SendPrivateMessage(message);
        }
        
        public Crossover.AMS.Dashboard.CommunicationService.PrivateMessage[] GetPrivateMessages(string senderSid, string recipientSid) {
            return base.Channel.GetPrivateMessages(senderSid, recipientSid);
        }
        
        public string[] GetNewPrivateSenders(string recipientSid) {
            return base.Channel.GetNewPrivateSenders(recipientSid);
        }
        
        public void MarkAsReaded(Crossover.AMS.Dashboard.CommunicationService.PrivateMessage message) {
            base.Channel.MarkAsReaded(message);
        }
        
        public Crossover.AMS.Dashboard.CommunicationService.ConferenceMessage[] GetConferenceMessages(long conferenceId) {
            return base.Channel.GetConferenceMessages(conferenceId);
        }
        
        public Crossover.AMS.Dashboard.CommunicationService.Conference CreateConference(long accidentId, string title) {
            return base.Channel.CreateConference(accidentId, title);
        }
        
        public void UpdateConference(Crossover.AMS.Dashboard.CommunicationService.Conference conference) {
            base.Channel.UpdateConference(conference);
        }
        
        public void DeleteConference(long conferenceId) {
            base.Channel.DeleteConference(conferenceId);
        }
        
        public Crossover.AMS.Dashboard.CommunicationService.Conference[] GetConferencieList(long accidentId) {
            return base.Channel.GetConferencieList(accidentId);
        }
    }
}
